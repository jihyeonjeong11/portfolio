{"version":3,"sources":["imgs/myflyingcatapp.jpg","imgs/flyingcat.jpg","cards/CardContent.js","cards/Cards.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardContent","props","useState","render","show","item","index","useEffect","setTimeout","hidden","className","src","thumbnail","alt","style","marginTop","onClick","goodsNm","goodsNo","href","console","log","goodArr1","require","Cards","goodArr","map","Header","matchesQuery","color","display","justifyContent","title","target","width","tooltip","App","window","matchMedia","matches","change","onresize","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,4C,4GCA3CD,EAAOC,QAAU,IAA0B,uC,wFCgC5BC,G,YA9BK,SAAAC,GAAU,IAAD,EACFC,oBAAS,GADP,mBAClBC,EADkB,KACVC,EADU,KAGnBC,EAAOJ,EAAMI,KACbC,EAAQL,EAAMK,MAMpB,OALAC,qBAAU,WACNC,YAAW,WACPJ,EAAK,CAACK,QAAQ,MACT,IAANH,KACJ,CAACA,IACAH,EAIA,yBAAKO,UAAU,oBACX,yBAAKA,UAAU,YACX,yBAAKC,IAAKN,EAAKO,UAAWC,IAAG,eAAUP,GAASI,UAAU,iBAC1D,yBAAKI,MAAO,CAACC,UAAW,MACxB,4BAAQC,QAAS,kBAAI,OAAO,KAEhC,yBAAKN,UAAU,uBACX,wBAAIA,UAAU,cAAcL,EAAKY,SACjC,uBAAGP,UAAU,4BAA4BL,EAAKa,SAC9C,uBAAGC,KAAK,IAAIH,QAAS,kBAAII,QAAQC,IAAIpB,IAAQS,UAAU,2BAAvD,iBAZD,OCVTY,EAAW,CACb,CACEL,QAAS,oBACTC,QAAS,KACTN,UAAWW,EAAQ,IAErB,CACEN,QAAS,gBACTC,QAAS,KACTN,UAAWW,EAAQ,IAErB,CACEN,QAAS,gBACTC,QAAS,KACTN,UAAWW,EAAQ,MA2BVC,MAtBf,SAAevB,GACX,IAAMwB,GAAe,OAALxB,QAAK,IAALA,OAAA,EAAAA,EAAOwB,UAAWH,EAElC,OACI,yBAAKZ,UAAU,iDACV,yBAAKA,UAAU,OACfe,EAAQC,KAAI,SAACrB,EAAKC,GACf,OAEI,yBAAKI,UAAU,YAET,kBAAC,EAAD,CAAaL,KAAMA,EAAMC,MAAOA,WCY3CqB,MAxCf,SAAgB1B,GACZ,IAAM2B,EAAe3B,EAAM2B,aAC3B,OACI,4BAAQlB,UAAW,cAEf,yBAAKA,UAAW,iBACZ,6BACI,6BACI,0BAAMI,MAAO,CAAEe,MAAO,UAAtB,mBAIU,WAAjBD,EACF,yBAAKd,MAAO,CAAEgB,QAAS,OAAQC,eAAgB,kBAE/C,6BACI,uBAAGZ,KAAK,0CAA0Ca,MAAM,8BAA8BC,OAAO,UAA7F,eAMJ,yBAAKnB,MAAO,CAAEgB,QAAS,OAAQC,eAAgB,gBAAiBG,MAAO,QAClE,6BACI,0BAAMC,QAAQ,OAAOrB,MAAO,CAAEe,MAAO,UAArC,UAEJ,6BACI,uBAAGV,KAAK,0CAA0Ca,MAAM,8BAA8BC,OAAO,UAA7F,iBCPTG,MApBf,WAAgB,IAAD,EACiBlC,mBAASmC,OAAOC,WAAW,sBAAsBC,QAAU,SAAW,MADvF,mBACNX,EADM,KACQY,EADR,KAYb,OAFAH,OAAOI,SARa,WAClB,IAAMF,EAAUF,OAAOC,WAAW,sBAAsBC,QAAW,SAAW,KAC3EA,IAAYX,GAGbY,EAAOD,IAMT,6BACE,kBAAC,EAAD,CAAQX,aAAcA,IACtB,kBAAC,EAAD,CAAOA,aAAcA,MCRPc,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2D,MCXNC,IAAS3C,OACP,kBAAC,IAAM4C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.61f2bca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myflyingcatapp.78badf9a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flyingcat.7bf834e5.jpg\";","import React, {useState, useEffect} from 'react';\r\nimport './card-style.css';\r\nconst CardContent = props => {\r\n    const [render, show] = useState(false);\r\n    \r\n    const item = props.item;\r\n    const index = props.index;\r\n    useEffect(()=>{\r\n        setTimeout(() => {\r\n            show({hidden: true});\r\n        }, index*1000);\r\n    }, [index])\r\n    if(!render){\r\n        return null;\r\n    }\r\n    return (\r\n        <div className='card text-center'>\r\n            <div className='overflow'>\r\n                <img src={item.thumbnail} alt={`image${index}`} className='card-img-top' />\r\n                <div style={{marginTop: 15}} />\r\n                <button onClick={()=>null}>{''}</button>\r\n            </div>\r\n            <div className='card-body text-dark'>\r\n                <h4 className='card-title'>{item.goodsNm}</h4>\r\n                <p className='card-text text-secondary'>{item.goodsNo}</p>\r\n                <a href='#' onClick={()=>console.log(props)} className='btn btn-outline-success'>go anywhere</a>\r\n   \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardContent;","import React from 'react';\r\nimport CardContent from './CardContent';\r\n\r\nconst goodArr1 = [\r\n    {\r\n      goodsNm: 'Flyingcat android',\r\n      goodsNo: 1231,\r\n      thumbnail: require('../imgs/myflyingcatapp.jpg')\r\n    },\r\n    {\r\n      goodsNm: 'Flyingcat ios',\r\n      goodsNo: 1242,\r\n      thumbnail: require('../imgs/myflyingcatapp.jpg')\r\n    },\r\n    {\r\n      goodsNm: 'Flyingcat web',\r\n      goodsNo: 2232,\r\n      thumbnail: require('../imgs/flyingcat.jpg')\r\n    },\r\n\r\n  ]\r\n\r\nfunction Cards(props) {\r\n    const goodArr = props?.goodArr || goodArr1;\r\n\r\n    return (\r\n        <div className=\"container-fluid d-flex justify-content-center\">\r\n             <div className=\"row\">\r\n            {goodArr.map((item,index) => {\r\n                return (\r\n                   \r\n                    <div className=\"col-md-4\">\r\n\r\n                          <CardContent item={item} index={index}/>\r\n                    </div>\r\n                \r\n                )\r\n            })}\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction Header(props) {\r\n    const matchesQuery = props.matchesQuery;\r\n    return (\r\n        <header className={'headerArea'}  >\r\n           \r\n            <div className={'headerContent'}>\r\n                <div>\r\n                    <div>\r\n                        <span style={{ color: 'white' }}>JIHYEON JEONG</span>\r\n                    </div>\r\n\r\n                </div>\r\n               { matchesQuery === 'mobile' ?\r\n               <div style={{ display: 'flex', justifyContent: 'space-between', }}>\r\n\r\n               <div>\r\n                   <a href=\"http://au.linkedin.com/in/jihyeon-jeong\" title=\"Connect with me on Linkedin\" target=\"_blank\">hamberger</a>\r\n               </div>\r\n\r\n           </div>\r\n               :\r\n\r\n               <div style={{ display: 'flex', justifyContent: 'space-between', width: '20%' }}>\r\n                    <div>\r\n                        <span tooltip='asoi' style={{ color: 'white' }}>email</span>\r\n                    </div>\r\n                    <div>\r\n                        <a href=\"http://au.linkedin.com/in/jihyeon-jeong\" title=\"Connect with me on Linkedin\" target=\"_blank\">linkedin</a>\r\n                    </div>\r\n\r\n                </div>\r\n}\r\n            </div>\r\n\r\n        </header>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Cards from './cards/Cards';\nimport Header from './Header';\n\nfunction App() {\n  const [matchesQuery, change]= useState(window.matchMedia(\"(max-width: 400px)\").matches ? 'mobile' : 'pc');\n  const changeQuery = () => {\n    const matches = window.matchMedia(\"(max-width: 400px)\").matches  ? 'mobile' : 'pc';\n    if(matches === matchesQuery){\n      return;\n    } else {\n      change(matches)\n    }\n  }\n  window.onresize = changeQuery;\n  \n  return (\n    <div >\n      <Header matchesQuery={matchesQuery} />\n      <Cards matchesQuery={matchesQuery} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}